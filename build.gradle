/*
 * Copyright (c) 2018, Oracle. All rights reserved.
 */

/*
 __________________________________________________________
 ____________________BUILDSCRIPT AREA _____________________
 Putting items in the buildscript closure ensures that the
 dependencies are available for use within the gradle build
 itself. Not the output program.
 */
buildscript {
  ext {
	springBootVersion = "2.2.1.RELEASE"
	springCloudVersion = 'Hoxton.RELEASE'
	releaseVersion = System.properties['artifact_version']
	if (System.properties['stage'].equals('release')) {
         groupName = 'release.obma.plato.'+ System.properties['release_version']+ '.services'
    }
    else{
        groupName = 'dev.obma.plato.services'
    }
  }
  repositories {
	  maven {url "https://artifacthub.oraclecorp.com/fsgbubanking-gradle-dev-local"}
	  maven { url "http://almrepo.us.oracle.com/artifactory/remote-repos" }
	  maven {url "https://almrepo.us.oracle.com/artifactory/tesseract-local"}
  }
  dependencies {
	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	classpath("com.commercehub:gradle-cucumber-jvm-plugin:0.13")
	classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
  }
}

plugins {
  // the plugins DSL is replacing apply plugin over time for Java-plugins. It is therefore favoured over the legacy "apply plugin:" approach
  id "java"
  id "groovy"
  id "eclipse"
  id 'org.hidetake.swagger.generator' version '2.18.1'
  id "jacoco"
  id "org.sonarqube" version "2.8"
  id 'com.commercehub.cucumber-jvm' version '0.14'
}

//apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "jacoco"
apply plugin: "cucumber-jvm"
apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'groovy'
apply plugin: 'war'

group groupName
version = releaseVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

//__________________________________________________________//
//_____________________ SWAGGER CONFIGURATION ______________//
swaggerSources {
  customer {
	def customerYaml = "${rootDir}/src/main/resources/api/customer.yaml"
	def configJson = "${rootDir}/src/main/resources/api/config.json"
	inputFile = file(customerYaml)
	def ignoreFile = "${rootDir}/src/main/resources/api/.swagger-codegen-ignore"
	code {
	  language = 'spring'
	  configFile = file(configJson)
	  rawOptions = ['--ignore-file-override', ignoreFile]
	  components = ['models', 'apis']
	  dependsOn validation
	}
  }
}

//__________________________________________________________//
//_____________ SONAR PLUGIN CONFIG AREA ___________________//
sonarqube {
  properties {
	property "sonar.projectName", "PLATO_${rootProject.name}"
	property "sonar.projectVersion", "${releaseVersion}"
	property "sonar.host.url", "http://localhost:9000"
	property "sonar.buildbreaker.skip","true"
	property "sonar.java.coveragePlugin", "jacoco"
	property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec" // path to coverage data
	property "sonar.exclusions", "**/build/**"
  }
}

compileJava {
  dependsOn processResources
  dependsOn swaggerSources.customer.code
  source "${swaggerSources.customer.code.outputDir}/src/main/java"
}

sourceSets {
  unitTest {
	java { srcDir 'src/test/groovy' }
	resources { srcDir 'src/test/resources' }
	compileClasspath += sourceSets.main.runtimeClasspath
  }
  main {
	java { srcDirs += "${swaggerSources.customer.code.outputDir}/src/main/java" }
  }
}

war {  
  enabled=true
  archiveName = 'platoref-' + version + '.war'
}

//__________________________________________________________//
//_____________ TEST CONFIG SETTINGS AREA __________________//
test {
  reports {
	junitXml.enabled = true
	html.enabled = true
  }
  testLogging { // Show that tests are run in the command-line output
	events 'passed' // 'started' is also an option
  }
}

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}

//__________________________________________________________//
//_________________ CUCUMBER CONFIG AREA  _________________//
addCucumberSuite 'cucumberTest'

cucumber {
	maxParallelForks = 1
}

cucumberTest {
  
  group = "Verification"
  description 'Runs the Acceptance Tests via connecting to a running system.'
  stepDefinitionRoots = ['classpath:oracle/fsgbu']
  junitReport = true
  tags = ['~@WIP']
  if (project.hasProperty('cucumberTags')) {
	  tags = [cucumberTags]
  }
  if (project.hasProperty('hostname')) {
   systemProperties = [ host: hostname, port: port ]
   }
   if(project.hasProperty('sshost')){
   systemProperties['sshost'] = sshost
   }
   if(project.hasProperty('ssport')){
   systemProperties['ssport'] = ssport
   }
   if(project.hasProperty('dbhost')){
   systemProperties['dbhost'] = dbhost
   }
   else {
   if (project.hasProperty('hostname')) {
   systemProperties['dbhost'] = hostname
   }
   }
   if(project.hasProperty('dbport')){
   systemProperties['dbport'] = dbport
   }
}

//needed to do this so we only display this message if the cucumberTest task was run
cucumberTest.doLast {
	if (tasks.cucumberTest.didWork) {
		println 'Running Cucumber tests with tag of: ' + tags
	}
}

//__________________________________________________________//
//___________________ JACOCO PLUGIN CONFIG AREA ____________//
jacoco { toolVersion = "0.8.0" }


jacocoTestReport {
  group = "Reporting"
  reports {
	xml.enabled true
	html.destination file("${buildDir}/reports/coverage")
  }
}

configurations {
  cucumberTestCompile.extendsFrom testCompile
  cucumberTestRuntime.extendsFrom testRuntime
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
}

/*dependencyManagement {
  imports {
	mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}*/

dependencies {
	compile("release.obma.plato.20_0_1.services:plato-microservice-dependencies:5.2.0")
	//compile("oracle.fsgbu.plato:plato-flyway:5.2.0")
	//compile("oracle.fsgbu.plato:plato-flyway:5.1.0")
	compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.10'
	testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:'2.2.1.RELEASE') { exclude(module: 'commons-logging') }
	testCompile(group: 'org.spockframework', name: 'spock-core', version:'1.3-groovy-2.5') { exclude(module: 'groovy-all') }
	testCompile(
	   'org.junit.jupiter:junit-jupiter-api:5.6.0-M1',
	   'org.codehaus.groovy:groovy-all:2.5.8',
	   'io.cucumber:cucumber-junit:4.8.0',
	   'io.cucumber:cucumber-java:4.8.0',
	   'org.glassfish.jersey.media:jersey-media-json-jackson:2.29.1',
	   'org.glassfish:javax.json:1.1.4',
	   'javax.json:javax.json-api:1.1.4',
	   'javax.servlet:javax.servlet-api:4.0.1'
	)
  
  repositories {
	maven {url "https://artifacthub.oraclecorp.com/fsgbubanking-gradle-dev-local"}
	maven { url "http://almrepo.us.oracle.com/artifactory/remote-repos" }
	maven {url "https://almrepo.us.oracle.com/artifactory/tesseract-local"}
  }
}
